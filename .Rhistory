z <- NULL
set <- function(y) {
x <<- y
z <<- NULL
}
get <- function() x
setsolve <- function(solve) z <<- solve
getsolve <- function() z
list(set = set, get = get, setsolve = setsolve, getsolve = getsolve)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
z <- x$getsolve()
if(!is.null(z)) {
message("getting cached data")
return(z)
}
data <- x$get()
z <- solve(data)
x$setsolve(z)
z
}
a <-matrix(c(1,1,-1,1),nrow=2,ncol=2)
mymatrix <- makeCacheMatrix(a)
cacheSolve(mymatrix)
mymatrix <- makeCacheMatrix(a)
cacheSolve(mymatrix)
mymatrix <- makeCacheMatrix(a)
cacheSolve(mymatrix)
makeCacheMatrix <- function(x = matrix()) {
z <- NULL
set <- function(y) {
x <<- y
z <<- NULL
}
get <- function() x
setsolve <- function(solve) z <<- solve
getsolve <- function() z
list(set = set, get = get, setsolve = setsolve, getsolve = getsolve)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
z <- x$getsolve()
if(!is.null(z)) {
message("getting cached data")
return(z)
}
data <- x$get()
z <- solve(data)
x$setsolve(z)
z
}
a <-matrix(c(1,1,-1,1),nrow=2,ncol=2)
mymatrix <- makeCacheMatrix(c(1,1,-1,1),nrow=2,col=2)
cacheSolve(mymatrix)
a <- c(1,1,-1,1)
mode(a)
attributes(a)
a <- matrix(c(1,1,-1,1))
attributes(a)
a <-matrix(c(1,1,-1,1), nrow=2,ncol=2)
attributes(a)
View(a)
R.version.string
install.packages("swirl")
library(swirl)
install_from_swirl("Getting and Cleaning Data")
swirl()
mydf <- read.csv(path2csv, stringasFactors = FALSE)
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
bye()
quit
q()
install.packages("sqldf")
library(sqldf)
acs <-read.csv("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv")
str(acs)
sqldf("select pwgtp1 from acs where AGEP < 50")
sqldf("select AGEP where unique from acs")
sqldf("select distinct AGEP from acs")
unique(acs$AGEP)
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
Str(nlme)
str(nlme)
head(nlme,n=3)
mod(nlme)
head(sys.frame(sys.parent()), n=3)
?nlme
str(Bodyweight)
str(Diet)
str(Diet)
?xyplot()
xyplot(weight ~ Time | Diet*BodyWeight)
xyplot(weight ~ Time | Diet,BodyWeight)
xyplot(weight ~ Time | Diet)
xyplot(weight ~ Time | Bodyweight)
str(Diet, Bodyweight)
str(rat)
library(datasets)
examples (lattice)
example (lattice)
x`x`
example(lattice)
example(lattic)
?datasets
library(help = "datasets")
?sys.frame(sys.parent())
library(lattice)
library(datasets)
data(airquality)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
print(p)
str(airquality)
library(lattice)
library(datasets)
data(airquality)
p <- xyplot(Ozone ~ Wind | factor(Month), airquality)
print(p)
data(Bodyweight)
library(datasets)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
library(datasets)
library(lattice)
xyplot(weight ~ Time | Diet,)
library(nlme)
nlme
str(model)
str(fixed)
str(groups)
str(Bodyweight)
str(BodyWeight)
xyplot(weight ~ Time | Diet, BodyWeight, axis(test))
xyplot(weight ~ Time | Diet, BodyWeight, lpoints("test"))
xyplot(weight ~ Time | Diet, BodyWeight, points("test"))
xyplot(weight ~ Time | Diet, BodyWeight, lines("test"))
?lines()
?lpoints()
?par()
?splom()
?trellis.par.set()
install.packages("ggplot2")
library(ggplot2)
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
qplot(Wind, Ozone, data = airquality)
qplot(Wind, Ozone, data = airquality, geom = "smooth")
?geom
?ggplot2
ggplot(movies, aes(votes, rating))
ggplot(movies, aes(votes, rating), p + layer(geom = "point"))
ggplot(movies, aes(votes, rating), layer(geom = "line"))
ggplot(movies, aes(votes, rating))
p + layer(geom = "point")
str(movies)
qplot(votes, rating, data = movies, geom = "smooth")
qplot(votes, rating, data = movies) + geom_smooth()
qplot(votes, rating, data = movies, panel = panel.loess)
qplot(votes, rating, data = movies, smooth = "loess")
qplot(votes, rating, data = movies) + stats_smooth("loess")
qplot(votes, rating, data = movies) + geom_smooth()
qplot(votes, rating, data = movies) + geom_smooth(method = "loess", se = FALSE)
qplot(votes, rating, data = movies) + geom_smooth(method = "loess")
qplot(votes, rating, data = movies) + geom_smooth()
qplot(votes, rating, data = movies, geom = "smooth")
x <- c(0.18, -1.54, 0.42, 0.95)
w <- c(2, 1, 3, 1)
mu <-0.1471
wx <-w*x
wx
wx <-w*(x-mu)
wx
wxsq <-wx^(2)
wxsq
sumwxsq <-sum(wxsq)
sumwxsq
mu <-1.077
wx <-w*(x-mu)
wxsq <-wx^(2)
sumwxsq <-sum(wxsq)
sumwxsq
mu <-0.0025
wx <-w*(x-mu)
wxsq <-wx^(2)
sumwxsq <-sum(wxsq)
sumwxsq
mu <-0.300
wx <-w*(x-mu)
wxsq <-wx^(2)
sumwxsq <-sum(wxsq)
sumwxsq
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
library(dplyr)
freqData <- as.data.frame(table(galton$child, galton$parent))
names(freqData) <- c("child", "parent", "freq")
freqData$child <- as.numeric(as.character(freqData$child))
freqData$parent <- as.numeric(as.character(freqData$parent))
g <- ggplot(filter(freqData, freq > 0), aes(x = parent, y = child))
g <- g  + scale_size(range = c(2, 20), guide = "none" )
g <- g + geom_point(colour="grey50", aes(size = freq+20, show_guide = FALSE))
g <- g + geom_point(aes(colour=freq, size = freq))
g <- g + scale_colour_gradient(low = "lightblue", high="white")
g
y <- galton$child - mean(galton$child)
x <- galton$parent - mean(galton$parent)
freqData <- as.data.frame(table(x, y))
names(freqData) <- c("child", "parent", "freq")
freqData$child <- as.numeric(as.character(freqData$child))
freqData$parent <- as.numeric(as.character(freqData$parent))
myPlot <- function(beta){
g <- ggplot(filter(freqData, freq > 0), aes(x = parent, y = child))
g <- g  + scale_size(range = c(2, 20), guide = "none" )
g <- g + geom_point(colour="grey50", aes(size = freq+20, show_guide = FALSE))
g <- g + geom_point(aes(colour=freq, size = freq))
g <- g + scale_colour_gradient(low = "lightblue", high="white")
g <- g + geom_abline(intercept = 0, slope = beta, size = 3)
mse <- mean( (y - beta * x) ^2 )
g <- g + ggtitle(paste("beta = ", beta, "mse = ", round(mse, 3)))
g
}
manipulate(myPlot(beta), beta = slider(0.6, 1.2, step = 0.02))
library(manipulate)
myHist <- function(mu){
mse <- mean((galton$child - mu)^2)
g <- ggplot(galton, aes(x = child)) + geom_histogram(fill = "salmon", colour = "black", binwidth=1)
g <- g + geom_vline(xintercept = mu, size = 3)
g <- g + ggtitle(paste("mu = ", mu, ", MSE = ", round(mse, 2), sep = ""))
g
}
manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))
library(UsingR); data(galton); library(reshape); long <- melt(galton)
g <- ggplot(long, aes(x = value, fill = variable))
g <- g + geom_histogram(colour = "black", binwidth=1)
g <- g + facet_grid(. ~ variable)
g
install.packages("UsingR")
library(UsingR)
library(manipulate)
data(galton); library(reshape); long <- melt(galton)
g <- ggplot(long, aes(x = value, fill = variable))
g <- g + geom_histogram(colour = "black", binwidth=1)
g <- g + facet_grid(. ~ variable)
g
install.packages("reshape")
data(galton); library(reshape); long <- melt(galton)
g <- ggplot(long, aes(x = value, fill = variable))
g <- g + geom_histogram(colour = "black", binwidth=1)
g <- g + facet_grid(. ~ variable)
g
library(manipulate)
myHist <- function(mu){
mse <- mean((galton$child - mu)^2)
g <- ggplot(galton, aes(x = child)) + geom_histogram(fill = "salmon", colour = "black", binwidth=1)
g <- g + geom_vline(xintercept = mu, size = 3)
g <- g + ggtitle(paste("mu = ", mu, ", MSE = ", round(mse, 2), sep = ""))
g
}
manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))
library(dplyr)
freqData <- as.data.frame(table(galton$child, galton$parent))
names(freqData) <- c("child", "parent", "freq")
freqData$child <- as.numeric(as.character(freqData$child))
freqData$parent <- as.numeric(as.character(freqData$parent))
g <- ggplot(filter(freqData, freq > 0), aes(x = parent, y = child))
g <- g  + scale_size(range = c(2, 20), guide = "none" )
g <- g + geom_point(colour="grey50", aes(size = freq+20, show_guide = FALSE))
g <- g + geom_point(aes(colour=freq, size = freq))
g <- g + scale_colour_gradient(low = "lightblue", high="white")
g
y <- galton$child - mean(galton$child)
x <- galton$parent - mean(galton$parent)
freqData <- as.data.frame(table(x, y))
names(freqData) <- c("child", "parent", "freq")
freqData$child <- as.numeric(as.character(freqData$child))
freqData$parent <- as.numeric(as.character(freqData$parent))
myPlot <- function(beta){
g <- ggplot(filter(freqData, freq > 0), aes(x = parent, y = child))
g <- g  + scale_size(range = c(2, 20), guide = "none" )
g <- g + geom_point(colour="grey50", aes(size = freq+20, show_guide = FALSE))
g <- g + geom_point(aes(colour=freq, size = freq))
g <- g + scale_colour_gradient(low = "lightblue", high="white")
g <- g + geom_abline(intercept = 0, slope = beta, size = 3)
mse <- mean( (y - beta * x) ^2 )
g <- g + ggtitle(paste("beta = ", beta, "mse = ", round(mse, 3)))
g
}
manipulate(myPlot(beta), beta = slider(0.6, 1.2, step = 0.02))
?lm
lm(y ~ x - 1)
lm(y ~ x )
g <- g + geom_abline(intercept = 0, slope = beta, size = 3)
g <- g + geom_abline(intercept = 0, slope = beta, size = 3)
g
g <- g + ggtitle(paste("beta = ", beta, "mse = ", round(mse, 3)))
g
mse <- mean( (y - beta * x) ^2 )
g <- g + ggtitle(paste("beta = ", beta, "mse = ", round(mse, 3)))
g
myPlot <- function(beta){
g <- ggplot(filter(freqData, freq > 0), aes(x = parent, y = child))
g <- g  + scale_size(range = c(2, 20), guide = "none" )
g <- g + geom_point(colour="grey50", aes(size = freq+20, show_guide = FALSE))
g <- g + geom_point(aes(colour=freq, size = freq))
g <- g + scale_colour_gradient(low = "lightblue", high="white")
g <- g + geom_abline(intercept = 0, slope = beta, size = 3)
mse <- mean( (y - beta * x) ^2 )
g <- g + ggtitle(paste("beta = ", beta, "mse = ", round(mse, 3)))
g
}
manipulate(myPlot(beta), beta = slider(0.6, 1.2, step = 0.02))
lm(y ~ 0 + x )
lm(y ~ x -1)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm(y ~ x)
lm(y~ 0+x)
lm(y~x -1)
data(mtcars)
str(mtcars)
lm(mpg ~ weight)
lm(mpg ~ wt)
lm(mpg ~ wt, data = mtcars)
0.4*1.5
mean(x <- c(8.58, 10.46, 9.01, 9.64, 8.86))
xnorm <- x - xmean
xmean <-mean(x <- c(8.58, 10.46, 9.01, 9.64, 8.86))
xnorm <- x - xmean
xnorm
x <- c(8.58, 10.46, 9.01, 9.64, 8.86)
x
xmean <-mean(x)
xmean <-mean(x)
xmean
8.58 - xmean
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm(y~x)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
mean(x)
x <- c(8.58, 10.46, 9.01, 9.64, 8.86)
x
mean(x)
std(x)
summary(x)
mean(x)
std(x)
summary(x)
sd(x)
(8.58 -mean(x))/sd(x)
x <- c(0.18, -1.54, 0.42, 0.95)
w <- c(2, 1, 3, 1)
mu1 = 0.1471
mu1 = 0.1471
mu2 = 1.077
mu3 = 0.0025
mu4 = 0.300
wx <-w*(x-mu1)
wxsq <-(wx)^(2)
wxsq <-(wx)^(2)
wxsq
wx <-w*((x-mu1)^(2))
wxsq <-(wx)
sumwxsq <-sum(wxsq)
sumwxsq
wx <-w*((x-mu2)^(2))
wxsq <-(wx)
sumwxsq <-sum(wxsq)
sumwxsq
wx <-w*((x-mu3)^(2))
wxsq <-(wx)
sumwxsq <-sum(wxsq)
sumwxsq
wx <-w*((x-mu4)^(2))
wxsq <-(wx)
sumwxsq <-sum(wxsq)
sumwxsq
choose(8,7)
choose(8,7)*0.5^8
choose(8,8)*0.5^8
choose(8,7)*0.5^8 +
choose(8,8)*0.5^8
pbinom(6,size = 8,prob = 0.5, lower.tail=FALSE)
?pbinom
pbinom(5,size = 8,prob = 0.5, lower.tail=FALSE)
pbinom(2,size = 8,prob = 0.5, lower.tail=FALSE)
pbinom(8,size = 8,prob = 0.5, lower.tail=FALSE)
pbinom(0,size = 8,prob = 0.5, lower.tail=FALSE)
pbinom(6,size = 8,prob = 0.5, lower.tail=FALSE)
pbinom(6,size = 8,prob = 0.5, lower.tail=TRUE)
pbinom(6,size = 8,prob = 0.5, lower.tail=FALSE)
xmean = 1020
xsd = .50
(1160 -xmean)/.5
xsd = 50
(1160 -xmean)/xsd
qnorm(0.75,mean=1020,sd = 50)
qnorm(0.90,mean=1020,sd = 50)
qnorm(0.2326,mean=10.6119,sd = .6582)
exp(qnorm(0.2326,mean=10.6119,sd = .6582))
pnorm(-0.0231789,mean = 0,sd = 1)
pnorm(0.5928485,mean = 0,sd = 1)
p1 <-pnorm(-0.0231789,mean = 0,sd = 1)
p2 <-pnorm(0.5928485,mean = 0,sd = 1)
p2-p1
1-p1
1-p2
1-p2 -(1-p1)
ln(50438)
log(50438)
ppois(3,lambda = 2.5*4)
n<- 100
means <- cumsum(sample(0:1,n,replace=TRUE))/(1:n)
means
plot(means)
n<- 500
means <- cumsum(sample(0:1,n,replace=TRUE))/(1:n)
plot(means)
n<- 1000
means <- cumsum(sample(0:1,n,replace=TRUE))/(1:n)
plot(means)
pnorm(93,mean = 100,sd = 10)
round(pnorm(93,mean = 100,sd = 10)*100)
qnorm(0.05,mean=100,sd = 10)
round(qnorm(0.05,mean=100,sd = 10),3)
round(qnorm(95,mean=100,sd = 10),3)
round(qnorm(.95,mean=100,sd = 10),3)
round(qnorm(.95,mean=100,sd = .20),3)
round(qnorm(.95,mean=100,sd = sqrt((10^(2))/50))),3)
round(qnorm(.95,mean=100,sd = sqrt(100/50))),3)
round(qnorm(.95,mean=100,sd = sqrt(100/50)),3)
pbinom(4,size = 6,prob = 0.5, lower.tail=FALSE)
?puniform
qunif(.5,mean=0.5,sd = sqrt(1/12),lower.tail=FALSE)
?qunif
qunif(.5,min = 0, max = 1, lower.tail = TRUE)
round(pnorm(0.51,mean = 0.5,sd = sqrt(1/12/100),lower.tail = FALSE),3)
(1/6)*(1+2+3+4+5+6)
var(1,2,3,4,5,6)
?var
var(c(1,2,3,4,5,6)
)
sqrt(var(c(1,2,3,4,5,6)))
sqrt(var(c(1,2,3,4,5,6))/10)
Round(sqrt(var(c(1,2,3,4,5,6))/10),3)
round(sqrt(var(c(1,2,3,4,5,6))/10),3)
mean((1 : 6 - 3.5)^2 / 10)
Round(ppois(20,lambda = 16.5*2),3)
round(ppois(20,lambda = 16.5*2),3)
round(pnorm(70,mean = 80,sd = 10)*100)
round(qnorm(.95,mean=1100,sd = 75),3)
round(qnorm(.95,mean=1100,sd = sqrt(75^(2)/100),3)
round(qnorm(.95,mean=1100,sd = sqrt(75^(2)/100)),3)
round(qnorm(.95,mean=1100,sd = sqrt(75^(2)/100)),3)
?pbinom
pbinom(3,size = 5,prob = 0.5, lower.tail = FALSE)
round(pnorm(14:16,mean = 15,sd = sqrt(10^(2)/100))*100)
round(pnorm(14,mean = 15,sd = sqrt(10^(2)/100))*100)
round(pnorm(16,mean = 15,sd = sqrt(10^(2)/100))*100)
round(pnorm(14,mean = 15,sd = sqrt(10^(2)/100))*100)
ppois(10,lambda = 5*3)
round(pnorm(14,mean = 15,sd = sqrt(10^(2)/100))*100)
install.packages("dplyr")
install.packages("sqldf")
install.packages("knitr")
install.packages("dplyr")
install.packages("sqldf")
install.packages("knitr")
install.packages("sqldf")
```{r echo = TRUE}
library(sqldf)
actwithnoNA <-sqldf("select t1.date, t1.interval as intervalONE,t2.interval as intervaltwo,t1.steps,t2.averagesteps_interval,
case
when  steps is null  then averagesteps_interval
when steps is not null  then steps
end as stepswithnoNA
from act as t1 inner join averagestepsinterval as t2
on t1.interval = t2.interval")
str(act_withnoNA)
head(act_withnoNA,3)
tail(act_withnoNA,3)
```
install.packages("dplyr")
install.packages("sqldf")
install.packages("knitr")
install.packages("dplyr")
install.packages("sqldf")
install.packages("knitr")
install.packages("lattice")
install.packages("dplyr")
install.packages("sqldf")
install.packages("knitr")
install.packages("lattice")
getwd()
setwd("C:/Users/laboybulancea/Desktop/Coursera/RR/project1/RepData_PeerAssessment1")
getwd()
install.packages("dplyr")
install.packages("sqldf")
install.packages("knitr")
install.packages("lattice")
